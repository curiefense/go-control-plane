// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: envoy/extensions/filters/http/waf/v3/waf.proto

package envoy_extensions_filters_http_waf_v3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on WAFCategoryGeneric with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WAFCategoryGeneric) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WAFCategoryGenericValidationError is the validation error returned by
// WAFCategoryGeneric.Validate if the designated constraints aren't met.
type WAFCategoryGenericValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WAFCategoryGenericValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WAFCategoryGenericValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WAFCategoryGenericValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WAFCategoryGenericValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WAFCategoryGenericValidationError) ErrorName() string {
	return "WAFCategoryGenericValidationError"
}

// Error satisfies the builtin error interface
func (e WAFCategoryGenericValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWAFCategoryGeneric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WAFCategoryGenericValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WAFCategoryGenericValidationError{}

// Validate checks the field values on WAFCategoryOSCI with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *WAFCategoryOSCI) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WAFCategoryOSCIValidationError is the validation error returned by
// WAFCategoryOSCI.Validate if the designated constraints aren't met.
type WAFCategoryOSCIValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WAFCategoryOSCIValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WAFCategoryOSCIValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WAFCategoryOSCIValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WAFCategoryOSCIValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WAFCategoryOSCIValidationError) ErrorName() string { return "WAFCategoryOSCIValidationError" }

// Error satisfies the builtin error interface
func (e WAFCategoryOSCIValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWAFCategoryOSCI.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WAFCategoryOSCIValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WAFCategoryOSCIValidationError{}

// Validate checks the field values on WAFCategoryXSS with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WAFCategoryXSS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Subcategory

	return nil
}

// WAFCategoryXSSValidationError is the validation error returned by
// WAFCategoryXSS.Validate if the designated constraints aren't met.
type WAFCategoryXSSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WAFCategoryXSSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WAFCategoryXSSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WAFCategoryXSSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WAFCategoryXSSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WAFCategoryXSSValidationError) ErrorName() string { return "WAFCategoryXSSValidationError" }

// Error satisfies the builtin error interface
func (e WAFCategoryXSSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWAFCategoryXSS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WAFCategoryXSSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WAFCategoryXSSValidationError{}

// Validate checks the field values on WAFCategorySQLI with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *WAFCategorySQLI) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Subcategory

	return nil
}

// WAFCategorySQLIValidationError is the validation error returned by
// WAFCategorySQLI.Validate if the designated constraints aren't met.
type WAFCategorySQLIValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WAFCategorySQLIValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WAFCategorySQLIValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WAFCategorySQLIValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WAFCategorySQLIValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WAFCategorySQLIValidationError) ErrorName() string { return "WAFCategorySQLIValidationError" }

// Error satisfies the builtin error interface
func (e WAFCategorySQLIValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWAFCategorySQLI.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WAFCategorySQLIValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WAFCategorySQLIValidationError{}

// Validate checks the field values on WAFCategory with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WAFCategory) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Category.(type) {

	case *WAFCategory_Generic:

		if v, ok := interface{}(m.GetGeneric()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WAFCategoryValidationError{
					field:  "Generic",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WAFCategory_Osci:

		if v, ok := interface{}(m.GetOsci()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WAFCategoryValidationError{
					field:  "Osci",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WAFCategory_Xss:

		if v, ok := interface{}(m.GetXss()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WAFCategoryValidationError{
					field:  "Xss",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WAFCategory_Sqli:

		if v, ok := interface{}(m.GetSqli()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WAFCategoryValidationError{
					field:  "Sqli",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return WAFCategoryValidationError{
			field:  "Category",
			reason: "value is required",
		}

	}

	return nil
}

// WAFCategoryValidationError is the validation error returned by
// WAFCategory.Validate if the designated constraints aren't met.
type WAFCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WAFCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WAFCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WAFCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WAFCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WAFCategoryValidationError) ErrorName() string { return "WAFCategoryValidationError" }

// Error satisfies the builtin error interface
func (e WAFCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWAFCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WAFCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WAFCategoryValidationError{}

// Validate checks the field values on WAFSignature with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WAFSignature) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Msg

	// no validation rules for Operand

	// no validation rules for Severity

	// no validation rules for Certainity

	if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WAFSignatureValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WAFSignatureValidationError is the validation error returned by
// WAFSignature.Validate if the designated constraints aren't met.
type WAFSignatureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WAFSignatureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WAFSignatureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WAFSignatureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WAFSignatureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WAFSignatureValidationError) ErrorName() string { return "WAFSignatureValidationError" }

// Error satisfies the builtin error interface
func (e WAFSignatureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWAFSignature.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WAFSignatureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WAFSignatureValidationError{}

// Validate checks the field values on WAFRuleEntryMatchMap with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WAFRuleEntryMatchMap) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Field

	// no validation rules for Key

	return nil
}

// WAFRuleEntryMatchMapValidationError is the validation error returned by
// WAFRuleEntryMatchMap.Validate if the designated constraints aren't met.
type WAFRuleEntryMatchMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WAFRuleEntryMatchMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WAFRuleEntryMatchMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WAFRuleEntryMatchMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WAFRuleEntryMatchMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WAFRuleEntryMatchMapValidationError) ErrorName() string {
	return "WAFRuleEntryMatchMapValidationError"
}

// Error satisfies the builtin error interface
func (e WAFRuleEntryMatchMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWAFRuleEntryMatchMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WAFRuleEntryMatchMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WAFRuleEntryMatchMapValidationError{}

// Validate checks the field values on WAFRuleEntryMatchValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WAFRuleEntryMatchValue) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Field

	return nil
}

// WAFRuleEntryMatchValueValidationError is the validation error returned by
// WAFRuleEntryMatchValue.Validate if the designated constraints aren't met.
type WAFRuleEntryMatchValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WAFRuleEntryMatchValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WAFRuleEntryMatchValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WAFRuleEntryMatchValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WAFRuleEntryMatchValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WAFRuleEntryMatchValueValidationError) ErrorName() string {
	return "WAFRuleEntryMatchValueValidationError"
}

// Error satisfies the builtin error interface
func (e WAFRuleEntryMatchValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWAFRuleEntryMatchValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WAFRuleEntryMatchValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WAFRuleEntryMatchValueValidationError{}

// Validate checks the field values on WAFRuleEntry with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WAFRuleEntry) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Description

	// no validation rules for Pattern

	switch m.Entry.(type) {

	case *WAFRuleEntry_Value:

		if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WAFRuleEntryValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WAFRuleEntry_Map:

		if v, ok := interface{}(m.GetMap()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WAFRuleEntryValidationError{
					field:  "Map",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return WAFRuleEntryValidationError{
			field:  "Entry",
			reason: "value is required",
		}

	}

	return nil
}

// WAFRuleEntryValidationError is the validation error returned by
// WAFRuleEntry.Validate if the designated constraints aren't met.
type WAFRuleEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WAFRuleEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WAFRuleEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WAFRuleEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WAFRuleEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WAFRuleEntryValidationError) ErrorName() string { return "WAFRuleEntryValidationError" }

// Error satisfies the builtin error interface
func (e WAFRuleEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWAFRuleEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WAFRuleEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WAFRuleEntryValidationError{}

// Validate checks the field values on WAFRuleSection with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WAFRuleSection) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Relation

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WAFRuleSectionValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// WAFRuleSectionValidationError is the validation error returned by
// WAFRuleSection.Validate if the designated constraints aren't met.
type WAFRuleSectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WAFRuleSectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WAFRuleSectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WAFRuleSectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WAFRuleSectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WAFRuleSectionValidationError) ErrorName() string { return "WAFRuleSectionValidationError" }

// Error satisfies the builtin error interface
func (e WAFRuleSectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWAFRuleSection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WAFRuleSectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WAFRuleSectionValidationError{}

// Validate checks the field values on WAFRule with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *WAFRule) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Relation

	for idx, item := range m.GetSections() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WAFRuleValidationError{
					field:  fmt.Sprintf("Sections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// WAFRuleValidationError is the validation error returned by WAFRule.Validate
// if the designated constraints aren't met.
type WAFRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WAFRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WAFRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WAFRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WAFRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WAFRuleValidationError) ErrorName() string { return "WAFRuleValidationError" }

// Error satisfies the builtin error interface
func (e WAFRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWAFRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WAFRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WAFRuleValidationError{}

// Validate checks the field values on WAFTagRule with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *WAFTagRule) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Source

	if v, ok := interface{}(m.GetMdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WAFTagRuleValidationError{
				field:  "Mdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Notes

	// no validation rules for Active

	if len(m.GetTags()) < 1 {
		return WAFTagRuleValidationError{
			field:  "Tags",
			reason: "value must contain at least 1 item(s)",
		}
	}

	if m.GetRule() == nil {
		return WAFTagRuleValidationError{
			field:  "Rule",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WAFTagRuleValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WAFTagRuleValidationError is the validation error returned by
// WAFTagRule.Validate if the designated constraints aren't met.
type WAFTagRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WAFTagRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WAFTagRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WAFTagRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WAFTagRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WAFTagRuleValidationError) ErrorName() string { return "WAFTagRuleValidationError" }

// Error satisfies the builtin error interface
func (e WAFTagRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWAFTagRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WAFTagRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WAFTagRuleValidationError{}

// Validate checks the field values on WAF with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *WAF) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSignatures() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WAFValidationError{
					field:  fmt.Sprintf("Signatures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTagrules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WAFValidationError{
					field:  fmt.Sprintf("Tagrules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// WAFValidationError is the validation error returned by WAF.Validate if the
// designated constraints aren't met.
type WAFValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WAFValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WAFValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WAFValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WAFValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WAFValidationError) ErrorName() string { return "WAFValidationError" }

// Error satisfies the builtin error interface
func (e WAFValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWAF.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WAFValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WAFValidationError{}

// Validate checks the field values on WAFPerRoute with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WAFPerRoute) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetXffTrustedHops() < 1 {
		return WAFPerRouteValidationError{
			field:  "XffTrustedHops",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// WAFPerRouteValidationError is the validation error returned by
// WAFPerRoute.Validate if the designated constraints aren't met.
type WAFPerRouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WAFPerRouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WAFPerRouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WAFPerRouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WAFPerRouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WAFPerRouteValidationError) ErrorName() string { return "WAFPerRouteValidationError" }

// Error satisfies the builtin error interface
func (e WAFPerRouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWAFPerRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WAFPerRouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WAFPerRouteValidationError{}
