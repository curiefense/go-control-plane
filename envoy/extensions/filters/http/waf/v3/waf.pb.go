// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: envoy/extensions/filters/http/waf/v3/waf.proto

package envoy_extensions_filters_http_waf_v3

import (
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WAFCategoryXSS_XSSSubcategory int32

const (
	WAFCategoryXSS_TAG_INSERTION WAFCategoryXSS_XSSSubcategory = 0
)

// Enum value maps for WAFCategoryXSS_XSSSubcategory.
var (
	WAFCategoryXSS_XSSSubcategory_name = map[int32]string{
		0: "TAG_INSERTION",
	}
	WAFCategoryXSS_XSSSubcategory_value = map[string]int32{
		"TAG_INSERTION": 0,
	}
)

func (x WAFCategoryXSS_XSSSubcategory) Enum() *WAFCategoryXSS_XSSSubcategory {
	p := new(WAFCategoryXSS_XSSSubcategory)
	*p = x
	return p
}

func (x WAFCategoryXSS_XSSSubcategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WAFCategoryXSS_XSSSubcategory) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_enumTypes[0].Descriptor()
}

func (WAFCategoryXSS_XSSSubcategory) Type() protoreflect.EnumType {
	return &file_envoy_extensions_filters_http_waf_v3_waf_proto_enumTypes[0]
}

func (x WAFCategoryXSS_XSSSubcategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WAFCategoryXSS_XSSSubcategory.Descriptor instead.
func (WAFCategoryXSS_XSSSubcategory) EnumDescriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{2, 0}
}

type WAFCategorySQLI_SQLISubcategory int32

const (
	WAFCategorySQLI_BUILTIN_FUNCTION_INVOCATION WAFCategorySQLI_SQLISubcategory = 0
	WAFCategorySQLI_ESCAPE_CHARACTER            WAFCategorySQLI_SQLISubcategory = 1
	WAFCategorySQLI_STATEMENT                   WAFCategorySQLI_SQLISubcategory = 2
	WAFCategorySQLI_STATEMENT_INJECTION         WAFCategorySQLI_SQLISubcategory = 3
)

// Enum value maps for WAFCategorySQLI_SQLISubcategory.
var (
	WAFCategorySQLI_SQLISubcategory_name = map[int32]string{
		0: "BUILTIN_FUNCTION_INVOCATION",
		1: "ESCAPE_CHARACTER",
		2: "STATEMENT",
		3: "STATEMENT_INJECTION",
	}
	WAFCategorySQLI_SQLISubcategory_value = map[string]int32{
		"BUILTIN_FUNCTION_INVOCATION": 0,
		"ESCAPE_CHARACTER":            1,
		"STATEMENT":                   2,
		"STATEMENT_INJECTION":         3,
	}
)

func (x WAFCategorySQLI_SQLISubcategory) Enum() *WAFCategorySQLI_SQLISubcategory {
	p := new(WAFCategorySQLI_SQLISubcategory)
	*p = x
	return p
}

func (x WAFCategorySQLI_SQLISubcategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WAFCategorySQLI_SQLISubcategory) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_enumTypes[1].Descriptor()
}

func (WAFCategorySQLI_SQLISubcategory) Type() protoreflect.EnumType {
	return &file_envoy_extensions_filters_http_waf_v3_waf_proto_enumTypes[1]
}

func (x WAFCategorySQLI_SQLISubcategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WAFCategorySQLI_SQLISubcategory.Descriptor instead.
func (WAFCategorySQLI_SQLISubcategory) EnumDescriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{3, 0}
}

type WAFRuleEntryMatchMap_Field int32

const (
	WAFRuleEntryMatchMap_args    WAFRuleEntryMatchMap_Field = 0
	WAFRuleEntryMatchMap_cookies WAFRuleEntryMatchMap_Field = 1
	WAFRuleEntryMatchMap_headers WAFRuleEntryMatchMap_Field = 2
)

// Enum value maps for WAFRuleEntryMatchMap_Field.
var (
	WAFRuleEntryMatchMap_Field_name = map[int32]string{
		0: "args",
		1: "cookies",
		2: "headers",
	}
	WAFRuleEntryMatchMap_Field_value = map[string]int32{
		"args":    0,
		"cookies": 1,
		"headers": 2,
	}
)

func (x WAFRuleEntryMatchMap_Field) Enum() *WAFRuleEntryMatchMap_Field {
	p := new(WAFRuleEntryMatchMap_Field)
	*p = x
	return p
}

func (x WAFRuleEntryMatchMap_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WAFRuleEntryMatchMap_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_enumTypes[2].Descriptor()
}

func (WAFRuleEntryMatchMap_Field) Type() protoreflect.EnumType {
	return &file_envoy_extensions_filters_http_waf_v3_waf_proto_enumTypes[2]
}

func (x WAFRuleEntryMatchMap_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WAFRuleEntryMatchMap_Field.Descriptor instead.
func (WAFRuleEntryMatchMap_Field) EnumDescriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{6, 0}
}

type WAFRuleEntryMatchValue_Field int32

const (
	WAFRuleEntryMatchValue_path    WAFRuleEntryMatchValue_Field = 0
	WAFRuleEntryMatchValue_query   WAFRuleEntryMatchValue_Field = 1
	WAFRuleEntryMatchValue_uri     WAFRuleEntryMatchValue_Field = 2
	WAFRuleEntryMatchValue_country WAFRuleEntryMatchValue_Field = 3
	WAFRuleEntryMatchValue_method  WAFRuleEntryMatchValue_Field = 4
	WAFRuleEntryMatchValue_asn     WAFRuleEntryMatchValue_Field = 5
	WAFRuleEntryMatchValue_ip      WAFRuleEntryMatchValue_Field = 6
)

// Enum value maps for WAFRuleEntryMatchValue_Field.
var (
	WAFRuleEntryMatchValue_Field_name = map[int32]string{
		0: "path",
		1: "query",
		2: "uri",
		3: "country",
		4: "method",
		5: "asn",
		6: "ip",
	}
	WAFRuleEntryMatchValue_Field_value = map[string]int32{
		"path":    0,
		"query":   1,
		"uri":     2,
		"country": 3,
		"method":  4,
		"asn":     5,
		"ip":      6,
	}
)

func (x WAFRuleEntryMatchValue_Field) Enum() *WAFRuleEntryMatchValue_Field {
	p := new(WAFRuleEntryMatchValue_Field)
	*p = x
	return p
}

func (x WAFRuleEntryMatchValue_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WAFRuleEntryMatchValue_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_enumTypes[3].Descriptor()
}

func (WAFRuleEntryMatchValue_Field) Type() protoreflect.EnumType {
	return &file_envoy_extensions_filters_http_waf_v3_waf_proto_enumTypes[3]
}

func (x WAFRuleEntryMatchValue_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WAFRuleEntryMatchValue_Field.Descriptor instead.
func (WAFRuleEntryMatchValue_Field) EnumDescriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{7, 0}
}

type WAFRuleSection_Relation int32

const (
	WAFRuleSection_OR  WAFRuleSection_Relation = 0
	WAFRuleSection_AND WAFRuleSection_Relation = 1
)

// Enum value maps for WAFRuleSection_Relation.
var (
	WAFRuleSection_Relation_name = map[int32]string{
		0: "OR",
		1: "AND",
	}
	WAFRuleSection_Relation_value = map[string]int32{
		"OR":  0,
		"AND": 1,
	}
)

func (x WAFRuleSection_Relation) Enum() *WAFRuleSection_Relation {
	p := new(WAFRuleSection_Relation)
	*p = x
	return p
}

func (x WAFRuleSection_Relation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WAFRuleSection_Relation) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_enumTypes[4].Descriptor()
}

func (WAFRuleSection_Relation) Type() protoreflect.EnumType {
	return &file_envoy_extensions_filters_http_waf_v3_waf_proto_enumTypes[4]
}

func (x WAFRuleSection_Relation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WAFRuleSection_Relation.Descriptor instead.
func (WAFRuleSection_Relation) EnumDescriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{9, 0}
}

type WAFRule_Relation int32

const (
	WAFRule_OR  WAFRule_Relation = 0
	WAFRule_AND WAFRule_Relation = 1
)

// Enum value maps for WAFRule_Relation.
var (
	WAFRule_Relation_name = map[int32]string{
		0: "OR",
		1: "AND",
	}
	WAFRule_Relation_value = map[string]int32{
		"OR":  0,
		"AND": 1,
	}
)

func (x WAFRule_Relation) Enum() *WAFRule_Relation {
	p := new(WAFRule_Relation)
	*p = x
	return p
}

func (x WAFRule_Relation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WAFRule_Relation) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_enumTypes[5].Descriptor()
}

func (WAFRule_Relation) Type() protoreflect.EnumType {
	return &file_envoy_extensions_filters_http_waf_v3_waf_proto_enumTypes[5]
}

func (x WAFRule_Relation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WAFRule_Relation.Descriptor instead.
func (WAFRule_Relation) EnumDescriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{10, 0}
}

type WAFCategoryGeneric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WAFCategoryGeneric) Reset() {
	*x = WAFCategoryGeneric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WAFCategoryGeneric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WAFCategoryGeneric) ProtoMessage() {}

func (x *WAFCategoryGeneric) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WAFCategoryGeneric.ProtoReflect.Descriptor instead.
func (*WAFCategoryGeneric) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{0}
}

type WAFCategoryOSCI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WAFCategoryOSCI) Reset() {
	*x = WAFCategoryOSCI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WAFCategoryOSCI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WAFCategoryOSCI) ProtoMessage() {}

func (x *WAFCategoryOSCI) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WAFCategoryOSCI.ProtoReflect.Descriptor instead.
func (*WAFCategoryOSCI) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{1}
}

type WAFCategoryXSS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subcategory WAFCategoryXSS_XSSSubcategory `protobuf:"varint,1,opt,name=subcategory,proto3,enum=envoy.extensions.filters.http.waf.v3.WAFCategoryXSS_XSSSubcategory" json:"subcategory,omitempty"`
}

func (x *WAFCategoryXSS) Reset() {
	*x = WAFCategoryXSS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WAFCategoryXSS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WAFCategoryXSS) ProtoMessage() {}

func (x *WAFCategoryXSS) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WAFCategoryXSS.ProtoReflect.Descriptor instead.
func (*WAFCategoryXSS) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{2}
}

func (x *WAFCategoryXSS) GetSubcategory() WAFCategoryXSS_XSSSubcategory {
	if x != nil {
		return x.Subcategory
	}
	return WAFCategoryXSS_TAG_INSERTION
}

type WAFCategorySQLI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subcategory WAFCategorySQLI_SQLISubcategory `protobuf:"varint,1,opt,name=subcategory,proto3,enum=envoy.extensions.filters.http.waf.v3.WAFCategorySQLI_SQLISubcategory" json:"subcategory,omitempty"`
}

func (x *WAFCategorySQLI) Reset() {
	*x = WAFCategorySQLI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WAFCategorySQLI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WAFCategorySQLI) ProtoMessage() {}

func (x *WAFCategorySQLI) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WAFCategorySQLI.ProtoReflect.Descriptor instead.
func (*WAFCategorySQLI) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{3}
}

func (x *WAFCategorySQLI) GetSubcategory() WAFCategorySQLI_SQLISubcategory {
	if x != nil {
		return x.Subcategory
	}
	return WAFCategorySQLI_BUILTIN_FUNCTION_INVOCATION
}

type WAFCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Category:
	//	*WAFCategory_Generic
	//	*WAFCategory_Osci
	//	*WAFCategory_Xss
	//	*WAFCategory_Sqli
	Category isWAFCategory_Category `protobuf_oneof:"category"`
}

func (x *WAFCategory) Reset() {
	*x = WAFCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WAFCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WAFCategory) ProtoMessage() {}

func (x *WAFCategory) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WAFCategory.ProtoReflect.Descriptor instead.
func (*WAFCategory) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{4}
}

func (m *WAFCategory) GetCategory() isWAFCategory_Category {
	if m != nil {
		return m.Category
	}
	return nil
}

func (x *WAFCategory) GetGeneric() *WAFCategoryGeneric {
	if x, ok := x.GetCategory().(*WAFCategory_Generic); ok {
		return x.Generic
	}
	return nil
}

func (x *WAFCategory) GetOsci() *WAFCategoryOSCI {
	if x, ok := x.GetCategory().(*WAFCategory_Osci); ok {
		return x.Osci
	}
	return nil
}

func (x *WAFCategory) GetXss() *WAFCategoryXSS {
	if x, ok := x.GetCategory().(*WAFCategory_Xss); ok {
		return x.Xss
	}
	return nil
}

func (x *WAFCategory) GetSqli() *WAFCategorySQLI {
	if x, ok := x.GetCategory().(*WAFCategory_Sqli); ok {
		return x.Sqli
	}
	return nil
}

type isWAFCategory_Category interface {
	isWAFCategory_Category()
}

type WAFCategory_Generic struct {
	Generic *WAFCategoryGeneric `protobuf:"bytes,1,opt,name=generic,proto3,oneof"`
}

type WAFCategory_Osci struct {
	Osci *WAFCategoryOSCI `protobuf:"bytes,2,opt,name=osci,proto3,oneof"`
}

type WAFCategory_Xss struct {
	Xss *WAFCategoryXSS `protobuf:"bytes,3,opt,name=xss,proto3,oneof"`
}

type WAFCategory_Sqli struct {
	Sqli *WAFCategorySQLI `protobuf:"bytes,4,opt,name=sqli,proto3,oneof"`
}

func (*WAFCategory_Generic) isWAFCategory_Category() {}

func (*WAFCategory_Osci) isWAFCategory_Category() {}

func (*WAFCategory_Xss) isWAFCategory_Category() {}

func (*WAFCategory_Sqli) isWAFCategory_Category() {}

// [#next-free-field: 8]
type WAFSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Msg        string       `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Operand    string       `protobuf:"bytes,4,opt,name=operand,proto3" json:"operand,omitempty"`
	Severity   int32        `protobuf:"varint,5,opt,name=severity,proto3" json:"severity,omitempty"`
	Certainity int32        `protobuf:"varint,6,opt,name=certainity,proto3" json:"certainity,omitempty"`
	Category   *WAFCategory `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *WAFSignature) Reset() {
	*x = WAFSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WAFSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WAFSignature) ProtoMessage() {}

func (x *WAFSignature) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WAFSignature.ProtoReflect.Descriptor instead.
func (*WAFSignature) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{5}
}

func (x *WAFSignature) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WAFSignature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WAFSignature) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WAFSignature) GetOperand() string {
	if x != nil {
		return x.Operand
	}
	return ""
}

func (x *WAFSignature) GetSeverity() int32 {
	if x != nil {
		return x.Severity
	}
	return 0
}

func (x *WAFSignature) GetCertainity() int32 {
	if x != nil {
		return x.Certainity
	}
	return 0
}

func (x *WAFSignature) GetCategory() *WAFCategory {
	if x != nil {
		return x.Category
	}
	return nil
}

type WAFRuleEntryMatchMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field WAFRuleEntryMatchMap_Field `protobuf:"varint,1,opt,name=field,proto3,enum=envoy.extensions.filters.http.waf.v3.WAFRuleEntryMatchMap_Field" json:"field,omitempty"`
	Key   string                     `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *WAFRuleEntryMatchMap) Reset() {
	*x = WAFRuleEntryMatchMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WAFRuleEntryMatchMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WAFRuleEntryMatchMap) ProtoMessage() {}

func (x *WAFRuleEntryMatchMap) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WAFRuleEntryMatchMap.ProtoReflect.Descriptor instead.
func (*WAFRuleEntryMatchMap) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{6}
}

func (x *WAFRuleEntryMatchMap) GetField() WAFRuleEntryMatchMap_Field {
	if x != nil {
		return x.Field
	}
	return WAFRuleEntryMatchMap_args
}

func (x *WAFRuleEntryMatchMap) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type WAFRuleEntryMatchValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field WAFRuleEntryMatchValue_Field `protobuf:"varint,1,opt,name=field,proto3,enum=envoy.extensions.filters.http.waf.v3.WAFRuleEntryMatchValue_Field" json:"field,omitempty"`
}

func (x *WAFRuleEntryMatchValue) Reset() {
	*x = WAFRuleEntryMatchValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WAFRuleEntryMatchValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WAFRuleEntryMatchValue) ProtoMessage() {}

func (x *WAFRuleEntryMatchValue) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WAFRuleEntryMatchValue.ProtoReflect.Descriptor instead.
func (*WAFRuleEntryMatchValue) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{7}
}

func (x *WAFRuleEntryMatchValue) GetField() WAFRuleEntryMatchValue_Field {
	if x != nil {
		return x.Field
	}
	return WAFRuleEntryMatchValue_path
}

type WAFRuleEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Types that are assignable to Entry:
	//	*WAFRuleEntry_Value
	//	*WAFRuleEntry_Map
	Entry   isWAFRuleEntry_Entry `protobuf_oneof:"entry"`
	Pattern string               `protobuf:"bytes,4,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *WAFRuleEntry) Reset() {
	*x = WAFRuleEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WAFRuleEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WAFRuleEntry) ProtoMessage() {}

func (x *WAFRuleEntry) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WAFRuleEntry.ProtoReflect.Descriptor instead.
func (*WAFRuleEntry) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{8}
}

func (x *WAFRuleEntry) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (m *WAFRuleEntry) GetEntry() isWAFRuleEntry_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *WAFRuleEntry) GetValue() *WAFRuleEntryMatchValue {
	if x, ok := x.GetEntry().(*WAFRuleEntry_Value); ok {
		return x.Value
	}
	return nil
}

func (x *WAFRuleEntry) GetMap() *WAFRuleEntryMatchMap {
	if x, ok := x.GetEntry().(*WAFRuleEntry_Map); ok {
		return x.Map
	}
	return nil
}

func (x *WAFRuleEntry) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

type isWAFRuleEntry_Entry interface {
	isWAFRuleEntry_Entry()
}

type WAFRuleEntry_Value struct {
	Value *WAFRuleEntryMatchValue `protobuf:"bytes,2,opt,name=value,proto3,oneof"`
}

type WAFRuleEntry_Map struct {
	Map *WAFRuleEntryMatchMap `protobuf:"bytes,3,opt,name=map,proto3,oneof"`
}

func (*WAFRuleEntry_Value) isWAFRuleEntry_Entry() {}

func (*WAFRuleEntry_Map) isWAFRuleEntry_Entry() {}

type WAFRuleSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation WAFRuleSection_Relation `protobuf:"varint,1,opt,name=relation,proto3,enum=envoy.extensions.filters.http.waf.v3.WAFRuleSection_Relation" json:"relation,omitempty"`
	Entries  []*WAFRuleEntry         `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *WAFRuleSection) Reset() {
	*x = WAFRuleSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WAFRuleSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WAFRuleSection) ProtoMessage() {}

func (x *WAFRuleSection) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WAFRuleSection.ProtoReflect.Descriptor instead.
func (*WAFRuleSection) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{9}
}

func (x *WAFRuleSection) GetRelation() WAFRuleSection_Relation {
	if x != nil {
		return x.Relation
	}
	return WAFRuleSection_OR
}

func (x *WAFRuleSection) GetEntries() []*WAFRuleEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type WAFRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation WAFRule_Relation  `protobuf:"varint,1,opt,name=relation,proto3,enum=envoy.extensions.filters.http.waf.v3.WAFRule_Relation" json:"relation,omitempty"`
	Sections []*WAFRuleSection `protobuf:"bytes,2,rep,name=sections,proto3" json:"sections,omitempty"`
}

func (x *WAFRule) Reset() {
	*x = WAFRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WAFRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WAFRule) ProtoMessage() {}

func (x *WAFRule) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WAFRule.ProtoReflect.Descriptor instead.
func (*WAFRule) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{10}
}

func (x *WAFRule) GetRelation() WAFRule_Relation {
	if x != nil {
		return x.Relation
	}
	return WAFRule_OR
}

func (x *WAFRule) GetSections() []*WAFRuleSection {
	if x != nil {
		return x.Sections
	}
	return nil
}

// [#next-free-field: 9]
type WAFTagRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Source string               `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Mdate  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=mdate,proto3" json:"mdate,omitempty"`
	Notes  string               `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	Active bool                 `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	Tags   []string             `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Rule   *WAFRule             `protobuf:"bytes,8,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *WAFTagRule) Reset() {
	*x = WAFTagRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WAFTagRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WAFTagRule) ProtoMessage() {}

func (x *WAFTagRule) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WAFTagRule.ProtoReflect.Descriptor instead.
func (*WAFTagRule) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{11}
}

func (x *WAFTagRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WAFTagRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WAFTagRule) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *WAFTagRule) GetMdate() *timestamp.Timestamp {
	if x != nil {
		return x.Mdate
	}
	return nil
}

func (x *WAFTagRule) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *WAFTagRule) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *WAFTagRule) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *WAFTagRule) GetRule() *WAFRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type WAF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures []*WAFSignature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Tagrules   []*WAFTagRule   `protobuf:"bytes,2,rep,name=tagrules,proto3" json:"tagrules,omitempty"`
}

func (x *WAF) Reset() {
	*x = WAF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WAF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WAF) ProtoMessage() {}

func (x *WAF) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WAF.ProtoReflect.Descriptor instead.
func (*WAF) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{12}
}

func (x *WAF) GetSignatures() []*WAFSignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *WAF) GetTagrules() []*WAFTagRule {
	if x != nil {
		return x.Tagrules
	}
	return nil
}

type WAFPerRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XffTrustedHops uint32 `protobuf:"varint,1,opt,name=xff_trusted_hops,json=xffTrustedHops,proto3" json:"xff_trusted_hops,omitempty"`
}

func (x *WAFPerRoute) Reset() {
	*x = WAFPerRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WAFPerRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WAFPerRoute) ProtoMessage() {}

func (x *WAFPerRoute) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WAFPerRoute.ProtoReflect.Descriptor instead.
func (*WAFPerRoute) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP(), []int{13}
}

func (x *WAFPerRoute) GetXffTrustedHops() uint32 {
	if x != nil {
		return x.XffTrustedHops
	}
	return 0
}

var File_envoy_extensions_filters_http_waf_v3_waf_proto protoreflect.FileDescriptor

var file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f,
	0x77, 0x61, 0x66, 0x2f, 0x76, 0x33, 0x2f, 0x77, 0x61, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x24, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e,
	0x77, 0x61, 0x66, 0x2e, 0x76, 0x33, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x75, 0x64, 0x70, 0x61, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x75, 0x64, 0x70, 0x61, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x57, 0x41, 0x46, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x22, 0x11, 0x0a, 0x0f, 0x57, 0x41, 0x46, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x53, 0x43, 0x49, 0x22, 0x9c, 0x01, 0x0a, 0x0e,
	0x57, 0x41, 0x46, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x58, 0x53, 0x53, 0x12, 0x65,
	0x0a, 0x0b, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x76, 0x33, 0x2e, 0x57, 0x41, 0x46, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x58, 0x53, 0x53, 0x2e, 0x58, 0x53, 0x53, 0x53, 0x75, 0x62,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x23, 0x0a, 0x0e, 0x58, 0x53, 0x53, 0x53, 0x75, 0x62, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x47, 0x5f, 0x49,
	0x4e, 0x53, 0x45, 0x52, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x22, 0xec, 0x01, 0x0a, 0x0f, 0x57,
	0x41, 0x46, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x51, 0x4c, 0x49, 0x12, 0x67,
	0x0a, 0x0b, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x76, 0x33, 0x2e, 0x57, 0x41, 0x46, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x51, 0x4c, 0x49, 0x2e, 0x53, 0x51, 0x4c, 0x49, 0x53,
	0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x70, 0x0a, 0x0f, 0x53, 0x51, 0x4c, 0x49, 0x53,
	0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x55,
	0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x56, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x53, 0x43, 0x41, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e,
	0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0xd8, 0x02, 0x0a, 0x0b, 0x57, 0x41,
	0x46, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x07, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x76,
	0x33, 0x2e, 0x57, 0x41, 0x46, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12,
	0x4b, 0x0a, 0x04, 0x6f, 0x73, 0x63, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x77, 0x61,
	0x66, 0x2e, 0x76, 0x33, 0x2e, 0x57, 0x41, 0x46, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4f, 0x53, 0x43, 0x49, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x73, 0x63, 0x69, 0x12, 0x48, 0x0a, 0x03,
	0x78, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x76, 0x33,
	0x2e, 0x57, 0x41, 0x46, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x58, 0x53, 0x53, 0x48,
	0x00, 0x52, 0x03, 0x78, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x04, 0x73, 0x71, 0x6c, 0x69, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x76, 0x33, 0x2e, 0x57, 0x41, 0x46, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x51, 0x4c, 0x49, 0x48, 0x00, 0x52, 0x04, 0x73,
	0x71, 0x6c, 0x69, 0x42, 0x0f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x03, 0xf8, 0x42, 0x01, 0x22, 0xe9, 0x01, 0x0a, 0x0c, 0x57, 0x41, 0x46, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x12, 0x4d, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x76, 0x33, 0x2e, 0x57, 0x41, 0x46, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x22, 0xad, 0x01, 0x0a, 0x14, 0x57, 0x41, 0x46, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x70, 0x12, 0x56, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x76, 0x33, 0x2e,
	0x57, 0x41, 0x46, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x2b, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x73, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x10, 0x02,
	0x22, 0xc3, 0x01, 0x0a, 0x16, 0x57, 0x41, 0x46, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x76,
	0x33, 0x2e, 0x57, 0x41, 0x46, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x4f, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x10, 0x05, 0x12, 0x06,
	0x0a, 0x02, 0x69, 0x70, 0x10, 0x06, 0x22, 0xfe, 0x01, 0x0a, 0x0c, 0x57, 0x41, 0x46, 0x52, 0x75,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x76, 0x33, 0x2e,
	0x57, 0x41, 0x46, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x4e, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x77, 0x61, 0x66,
	0x2e, 0x76, 0x33, 0x2e, 0x57, 0x41, 0x46, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x0c, 0x0a, 0x05, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x0e, 0x57, 0x41, 0x46, 0x52,
	0x75, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x77, 0x61, 0x66,
	0x2e, 0x76, 0x33, 0x2e, 0x57, 0x41, 0x46, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x76, 0x33, 0x2e, 0x57, 0x41,
	0x46, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x1b, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x01,
	0x22, 0xcc, 0x01, 0x0a, 0x07, 0x57, 0x41, 0x46, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x08,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x77,
	0x61, 0x66, 0x2e, 0x76, 0x33, 0x2e, 0x57, 0x41, 0x46, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x76, 0x33, 0x2e, 0x57, 0x41, 0x46, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x1b, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x22,
	0x93, 0x02, 0x0a, 0x0a, 0x57, 0x41, 0x46, 0x54, 0x61, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6d, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x6d, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x76, 0x33, 0x2e, 0x57, 0x41,
	0x46, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x03, 0x57, 0x41, 0x46, 0x12, 0x52, 0x0a,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x76, 0x33, 0x2e, 0x57, 0x41, 0x46, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x4c, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x76, 0x33, 0x2e, 0x57, 0x41, 0x46, 0x54, 0x61,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x74, 0x61, 0x67, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0x40, 0x0a, 0x0b, 0x57, 0x41, 0x46, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x31,
	0x0a, 0x10, 0x78, 0x66, 0x66, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28,
	0x01, 0x52, 0x0e, 0x78, 0x66, 0x66, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x70,
	0x73, 0x42, 0x48, 0x0a, 0x32, 0x69, 0x6f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x2e, 0x77, 0x61, 0x66, 0x2e, 0x76, 0x33, 0x42, 0x08, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0xba, 0x80, 0xc8, 0xd1, 0x06, 0x02, 0x10, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescOnce sync.Once
	file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescData = file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDesc
)

func file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescGZIP() []byte {
	file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescData = protoimpl.X.CompressGZIP(file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescData)
	})
	return file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDescData
}

var file_envoy_extensions_filters_http_waf_v3_waf_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_envoy_extensions_filters_http_waf_v3_waf_proto_goTypes = []interface{}{
	(WAFCategoryXSS_XSSSubcategory)(0),   // 0: envoy.extensions.filters.http.waf.v3.WAFCategoryXSS.XSSSubcategory
	(WAFCategorySQLI_SQLISubcategory)(0), // 1: envoy.extensions.filters.http.waf.v3.WAFCategorySQLI.SQLISubcategory
	(WAFRuleEntryMatchMap_Field)(0),      // 2: envoy.extensions.filters.http.waf.v3.WAFRuleEntryMatchMap.Field
	(WAFRuleEntryMatchValue_Field)(0),    // 3: envoy.extensions.filters.http.waf.v3.WAFRuleEntryMatchValue.Field
	(WAFRuleSection_Relation)(0),         // 4: envoy.extensions.filters.http.waf.v3.WAFRuleSection.Relation
	(WAFRule_Relation)(0),                // 5: envoy.extensions.filters.http.waf.v3.WAFRule.Relation
	(*WAFCategoryGeneric)(nil),           // 6: envoy.extensions.filters.http.waf.v3.WAFCategoryGeneric
	(*WAFCategoryOSCI)(nil),              // 7: envoy.extensions.filters.http.waf.v3.WAFCategoryOSCI
	(*WAFCategoryXSS)(nil),               // 8: envoy.extensions.filters.http.waf.v3.WAFCategoryXSS
	(*WAFCategorySQLI)(nil),              // 9: envoy.extensions.filters.http.waf.v3.WAFCategorySQLI
	(*WAFCategory)(nil),                  // 10: envoy.extensions.filters.http.waf.v3.WAFCategory
	(*WAFSignature)(nil),                 // 11: envoy.extensions.filters.http.waf.v3.WAFSignature
	(*WAFRuleEntryMatchMap)(nil),         // 12: envoy.extensions.filters.http.waf.v3.WAFRuleEntryMatchMap
	(*WAFRuleEntryMatchValue)(nil),       // 13: envoy.extensions.filters.http.waf.v3.WAFRuleEntryMatchValue
	(*WAFRuleEntry)(nil),                 // 14: envoy.extensions.filters.http.waf.v3.WAFRuleEntry
	(*WAFRuleSection)(nil),               // 15: envoy.extensions.filters.http.waf.v3.WAFRuleSection
	(*WAFRule)(nil),                      // 16: envoy.extensions.filters.http.waf.v3.WAFRule
	(*WAFTagRule)(nil),                   // 17: envoy.extensions.filters.http.waf.v3.WAFTagRule
	(*WAF)(nil),                          // 18: envoy.extensions.filters.http.waf.v3.WAF
	(*WAFPerRoute)(nil),                  // 19: envoy.extensions.filters.http.waf.v3.WAFPerRoute
	(*timestamp.Timestamp)(nil),          // 20: google.protobuf.Timestamp
}
var file_envoy_extensions_filters_http_waf_v3_waf_proto_depIdxs = []int32{
	0,  // 0: envoy.extensions.filters.http.waf.v3.WAFCategoryXSS.subcategory:type_name -> envoy.extensions.filters.http.waf.v3.WAFCategoryXSS.XSSSubcategory
	1,  // 1: envoy.extensions.filters.http.waf.v3.WAFCategorySQLI.subcategory:type_name -> envoy.extensions.filters.http.waf.v3.WAFCategorySQLI.SQLISubcategory
	6,  // 2: envoy.extensions.filters.http.waf.v3.WAFCategory.generic:type_name -> envoy.extensions.filters.http.waf.v3.WAFCategoryGeneric
	7,  // 3: envoy.extensions.filters.http.waf.v3.WAFCategory.osci:type_name -> envoy.extensions.filters.http.waf.v3.WAFCategoryOSCI
	8,  // 4: envoy.extensions.filters.http.waf.v3.WAFCategory.xss:type_name -> envoy.extensions.filters.http.waf.v3.WAFCategoryXSS
	9,  // 5: envoy.extensions.filters.http.waf.v3.WAFCategory.sqli:type_name -> envoy.extensions.filters.http.waf.v3.WAFCategorySQLI
	10, // 6: envoy.extensions.filters.http.waf.v3.WAFSignature.category:type_name -> envoy.extensions.filters.http.waf.v3.WAFCategory
	2,  // 7: envoy.extensions.filters.http.waf.v3.WAFRuleEntryMatchMap.field:type_name -> envoy.extensions.filters.http.waf.v3.WAFRuleEntryMatchMap.Field
	3,  // 8: envoy.extensions.filters.http.waf.v3.WAFRuleEntryMatchValue.field:type_name -> envoy.extensions.filters.http.waf.v3.WAFRuleEntryMatchValue.Field
	13, // 9: envoy.extensions.filters.http.waf.v3.WAFRuleEntry.value:type_name -> envoy.extensions.filters.http.waf.v3.WAFRuleEntryMatchValue
	12, // 10: envoy.extensions.filters.http.waf.v3.WAFRuleEntry.map:type_name -> envoy.extensions.filters.http.waf.v3.WAFRuleEntryMatchMap
	4,  // 11: envoy.extensions.filters.http.waf.v3.WAFRuleSection.relation:type_name -> envoy.extensions.filters.http.waf.v3.WAFRuleSection.Relation
	14, // 12: envoy.extensions.filters.http.waf.v3.WAFRuleSection.entries:type_name -> envoy.extensions.filters.http.waf.v3.WAFRuleEntry
	5,  // 13: envoy.extensions.filters.http.waf.v3.WAFRule.relation:type_name -> envoy.extensions.filters.http.waf.v3.WAFRule.Relation
	15, // 14: envoy.extensions.filters.http.waf.v3.WAFRule.sections:type_name -> envoy.extensions.filters.http.waf.v3.WAFRuleSection
	20, // 15: envoy.extensions.filters.http.waf.v3.WAFTagRule.mdate:type_name -> google.protobuf.Timestamp
	16, // 16: envoy.extensions.filters.http.waf.v3.WAFTagRule.rule:type_name -> envoy.extensions.filters.http.waf.v3.WAFRule
	11, // 17: envoy.extensions.filters.http.waf.v3.WAF.signatures:type_name -> envoy.extensions.filters.http.waf.v3.WAFSignature
	17, // 18: envoy.extensions.filters.http.waf.v3.WAF.tagrules:type_name -> envoy.extensions.filters.http.waf.v3.WAFTagRule
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_envoy_extensions_filters_http_waf_v3_waf_proto_init() }
func file_envoy_extensions_filters_http_waf_v3_waf_proto_init() {
	if File_envoy_extensions_filters_http_waf_v3_waf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WAFCategoryGeneric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WAFCategoryOSCI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WAFCategoryXSS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WAFCategorySQLI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WAFCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WAFSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WAFRuleEntryMatchMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WAFRuleEntryMatchValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WAFRuleEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WAFRuleSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WAFRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WAFTagRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WAF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WAFPerRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*WAFCategory_Generic)(nil),
		(*WAFCategory_Osci)(nil),
		(*WAFCategory_Xss)(nil),
		(*WAFCategory_Sqli)(nil),
	}
	file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*WAFRuleEntry_Value)(nil),
		(*WAFRuleEntry_Map)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_filters_http_waf_v3_waf_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_filters_http_waf_v3_waf_proto_depIdxs,
		EnumInfos:         file_envoy_extensions_filters_http_waf_v3_waf_proto_enumTypes,
		MessageInfos:      file_envoy_extensions_filters_http_waf_v3_waf_proto_msgTypes,
	}.Build()
	File_envoy_extensions_filters_http_waf_v3_waf_proto = out.File
	file_envoy_extensions_filters_http_waf_v3_waf_proto_rawDesc = nil
	file_envoy_extensions_filters_http_waf_v3_waf_proto_goTypes = nil
	file_envoy_extensions_filters_http_waf_v3_waf_proto_depIdxs = nil
}
